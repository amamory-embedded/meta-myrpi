# We have a conf and classes directory, add to BBPATH
BBPATH .= ":${LAYERDIR}"

# We have recipes-* directories, add to BBFILES
BBFILES += "${LAYERDIR}/recipes-*/*/*.bb \
            ${LAYERDIR}/recipes-*/*/*.bbappend"

BBFILE_COLLECTIONS += "meta-myrpi"
BBFILE_PATTERN_meta-myrpi = "^${LAYERDIR}/"
# meta-raspberry-pi has priority 9 but we want that out layer to be the 
# last one to avoid being overwritten. So, we assign priority 10
# run : bitbake-layer show-layers to show the priority of all layers
# NOTE: Starting bitbake server...
# layer                 path                                      priority
# ==========================================================================
# meta                  /opt/yocto/dunfell/src/poky/meta          5
# meta-poky             /opt/yocto/dunfell/src/poky/meta-poky     5
# meta-yocto-bsp        /opt/yocto/dunfell/src/poky/meta-yocto-bsp  5
# meta-myrpi            /home/build/rpi/build/meta-myrpi       10    <======
# meta-raspberrypi      /opt/yocto/dunfell/src/meta-raspberrypi   9
# meta-oe               /opt/yocto/dunfell/src/meta-openembedded/meta-oe  6
# meta-networking       /opt/yocto/dunfell/src/meta-openembedded/meta-networking  5
# meta-python           /opt/yocto/dunfell/src/meta-openembedded/meta-python  7
BBFILE_PRIORITY_meta-myrpi = "10"

LAYERDEPENDS_meta-myrpi = "core"
LAYERSERIES_COMPAT_meta-myrpi = "dunfell"


###########################
# kernel modules tools, lsusb
###########################

IMAGE_INSTALL_append += " kmod \
        usbutils \
        ldd" 

###########################
# enable serial console and I2C
###########################
ENABLE_UART = "1"
ENABLE_I2C = "1"

KERNEL_MODULE_AUTOLOAD += "i2c-dev i2c-bcm2708"

# check the following files to check whether the modifications were applied
# $ cat /mnt/yocto/tmp/deploy/images/raspberrypi3/bootfiles/config.txt | grep serial
# $ cat /mnt/yocto/tmp/deploy/images/raspberrypi3/bootfiles/cmdline.txt 

###########################
# wifi setup
###########################
# run bitbake -e core-image-minimal | grep "^DISTRO_FEATURES"
# run bitbake -e core-image-minimal | grep "^MACHINE_FEATURES"
# $ bitbake -e core-image-minimal | grep "^COMBINED_FEATURES"
#   COMBINED_FEATURES="vfat bluetooth ext2 usbhost wifi alsa"
# to learn about the supported features
# https://www.yoctoproject.org/docs/2.1/mega-manual/mega-manual.html#var-DISTRO_FEATURES
# learn more : 
#   - https://embeddedguruji.blogspot.com/2019/04/machinefeatures-vs-distrofeatures-in.html
#   - https://docs.yoctoproject.org/3.2.3/ref-manual/ref-features.html
DISTRO_FEATURES_append += " wifi"
IMAGE_INSTALL_append += " i2c-tools \
        bridge-utils \
        hostapd \
        dhcp-client \
        iw \        
        dhcp-server \
        iptables \
        wpa-supplicant"

MACHINE_ESSENTIAL_EXTRA_RDEPENDS += "kernel-module-brcmfmac"

# errorneous :
# linux-firmware-brcm43430 
# python-smbus 

###########################
# VNC
###########################
# VNC has lots of depedency. It's heavy. Be sure you need it.
IMAGE_INSTALL_append += " x11vnc"

###########################
# USB gadget - 
###########################
# enable usb thetering from phone
# sources: https://raspiproject.altervista.org/usb-and-bluetooth-tethering-with-raspberry-pi/
# https://peppe8o.com/raspberry-pi-portable-hotspot-with-android-usb-tethering/
# https://learn.adafruit.com/turning-your-raspberry-pi-zero-into-a-usb-gadget/ethernet-gadget
# https://raspberrypi.stackexchange.com/questions/124004/detect-rpi4-as-usb-network-interface-g-ether-dwc2
# https://support.criticallink.com/redmine/projects/arm9-platforms/wiki/Enabling_USB_RNDIS_Support


# about USB functions:
# https://developer.toradex.com/knowledge-base/usb-device-mode-linux

# not sure if this is required ... i might be polluting it.
#IMAGE_INSTALL_append += " kernel-modules"
MACHINE_ESSENTIAL_EXTRA_RDEPENDS += "kernel-module-dwc2"

# This command adds the following line to config.txt:
#   dtoverlay=dwc2,dr_mode=peripheral
ENABLE_DWC2_PERIPHERAL = "1"

# g_ether is for the gadget-side 
KERNEL_MODULE_AUTOLOAD += "dwc2 g_ether usb_f_ecm"
MACHINE_ESSENTIAL_EXTRA_RDEPENDS += "kernel-module-dwc2 kernel-module-g-ether kernel-module-usb-f-ecm"

# check the following files to check whether the modifications were applied
# $ cat /mnt/yocto/tmp/deploy/images/raspberrypi3/bootfiles/config.txt | grep -i dwc
# $ cat /mnt/yocto/tmp/deploy/images/raspberrypi3/bootfiles/cmdline.txt 

###########################
# EXTRA_IMAGE_FEATURES 
###########################
# https://docs.yoctoproject.org/3.2.3/ref-manual/ref-features.html#image-features
# some of the most relevant features are:
# - debug-tweaks: Makes an image suitable for development (e.g. allows root logins without passwords and enables post-installation logging). See the ‘allow-empty-password’, ‘empty-root-password’, and ‘post-install-logging’ features in this list for additional information.
# - dev-pkgs: Installs development packages (headers and extra library links) for all packages installed in a given image.
# - package-management: Installs package management tools and preserves the package manager database.
# - tools-sdk: Installs a full SDK that runs on the device.
# - perf: Installs profiling tools such as perf, systemtap, and LTTng. For general information on user-space tools, see the Yocto Project Application Development and the Extensible Software Development Kit (eSDK) manual.
# - ssh-server-dropbear: Installs the Dropbear minimal SSH server.
# - ssh-server-openssh: Installs the OpenSSH SSH server, which is more full-featured than Dropbear. Note that if both the OpenSSH SSH server and the Dropbear minimal SSH server are present in IMAGE_FEATURES, then OpenSSH will take precedence and Dropbear will not be installed.

EXTRA_IMAGE_FEATURES ?= "debug-tweaks ssh-server-openssh"
